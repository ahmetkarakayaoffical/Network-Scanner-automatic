import tkinter as tk
from tkinter import ttk, filedialog, messagebox, simpledialog
import subprocess
import webbrowser

class NetworkScannerApp:
    def __init__(self, master):
        self.master = master
        master.title("Network Scanner")
        master.geometry("800x600")
        master.configure(bg="#f0f0f0")

        self.text_label = tk.Label(master, text="Bu yazılım Ahmet Karakaya tarafından yazılmıştır", bg="#f0f0f0", fg="black", font=("Arial", 14, "bold"))
        self.text_label.pack(pady=10)

        self.ip_entry_label = tk.Label(master, text="Enter IP Address or Domain:", bg="#f0f0f0", font=("Arial", 12))
        self.ip_entry_label.pack()

        self.ip_entry = tk.Entry(master, font=("Arial", 12))
        self.ip_entry.pack()

        self.domain_var = tk.BooleanVar()
        self.domain_checkbox = tk.Checkbutton(master, text="Scan as Domain", variable=self.domain_var, bg="#f0f0f0", font=("Arial", 12))
        self.domain_checkbox.pack()

        self.label = tk.Label(master, text="Select Scan Type:", bg="#f0f0f0", font=("Arial", 12))
        self.label.pack()

        self.scan_type_combobox = ttk.Combobox(master, values=["Nmap", "Nikto", "WPScan"], font=("Arial", 12))
        self.scan_type_combobox.pack()

        self.scan_button = tk.Button(master, text="Start Scan", command=self.start_scan, bg="green", fg="white", font=("Arial", 12, "bold"))
        self.scan_button.pack(pady=10)

        self.export_button = tk.Button(master, text="Export Results", command=self.export_results, bg="blue", fg="white", font=("Arial", 12, "bold"))
        self.export_button.pack(pady=5)

        self.linkedin_label = tk.Label(master, text="LinkedIn: ahmetkarakayaofficial", bg="#f0f0f0", fg="red", font=("Arial", 12, "bold"), cursor="hand2")
        self.linkedin_label.pack(pady=5)
        self.linkedin_label.bind("<Button-1>", self.open_linkedin)

        self.results_text = tk.Text(master, bg="white", font=("Arial", 12))
        self.results_text.pack(expand=True, fill="both", padx=10, pady=5)

    def start_scan(self):
        ip_or_domain = self.ip_entry.get()
        is_domain_scan = self.domain_var.get()
        selected_scan_type = self.scan_type_combobox.get()

        if not ip_or_domain:
            self.results_text.insert(tk.END, "Please enter an IP address or domain!\n")
            return

        scan_command = ""

        if is_domain_scan:
            if selected_scan_type == "Nmap":
                scan_command = f"nmap {ip_or_domain}"
            elif selected_scan_type == "Nikto":
                scan_command = f"nikto -h {ip_or_domain}"
            elif selected_scan_type == "WPScan":
                api_key = simpledialog.askstring("WPScan API Key", "Please enter your WPScan API Key.")
                scan_command = f"wpscan --url {ip_or_domain} --api-token {api_key}"
        else:
            if selected_scan_type == "Nmap":
                scan_command = f"nmap -F {ip_or_domain}"

        if not scan_command:
            self.results_text.insert(tk.END, "Please select a valid scan type!\n")
            return

        self.results_text.delete(1.0, tk.END)
        self.results_text.insert(tk.END, f"Running {selected_scan_type} Scan\n\n")

        try:
            scan_output = subprocess.check_output(scan_command, shell=True, universal_newlines=True)
            self.process_scan_results(scan_output, selected_scan_type)
        except subprocess.CalledProcessError as e:
            self.results_text.insert(tk.END, f"Error: {e}\n")

    def process_scan_results(self, scan_output, selected_scan_type):
        lines = scan_output.split("\n")

        for line in lines:
            if "Nmap scan report for" in line:
                self.results_text.insert(tk.END, f"{line}\n", "host")
            elif "open" in line:
                parts = line.split()
                port_info = parts[0].split('/')
                if len(port_info) >= 2:
                    port_number = port_info[0]
                    if int(port_number) in [21, 22, 23, 80, 443, 3306, 3389, 5900]:  # Riskli portlar
                        self.results_text.insert(tk.END, f"{line}\n", "open_risk")
                    else:
                        self.results_text.insert(tk.END, f"{line}\n", "open_port")
            elif "VULNERABLE" in line:
                if selected_scan_type == "WPScan":
                    self.results_text.insert(tk.END, f"{line}\n", "vulnerable_wp")
                else:
                    self.results_text.insert(tk.END, f"{line}\n", "vulnerable_general")
            else:
                self.results_text.insert(tk.END, f"{line}\n")

        self.results_text.tag_config("host", foreground="blue")
        self.results_text.tag_config("open_port", foreground="green")
        self.results_text.tag_config("open_risk", foreground="blue")
        self.results_text.tag_config("vulnerable_general", foreground="red")
        self.results_text.tag_config("vulnerable_wp", foreground="red")

    def export_results(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt")])
        if file_path:
            with open(file_path, "w") as file:
                file.write(self.results_text.get(1.0, tk.END))

    def open_linkedin(self, event):
        webbrowser.open_new("https://www.linkedin.com/in/ahmetkarakayaofficial")

def main():
    root = tk.Tk()
    app = NetworkScannerApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
